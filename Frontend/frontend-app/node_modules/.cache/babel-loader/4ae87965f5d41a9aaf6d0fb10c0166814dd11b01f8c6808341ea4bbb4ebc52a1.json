{"ast":null,"code":"// Teacher service for API calls\nconst API_BASE_URL = \"http://localhost:8000\";\n\n// Create a new teacher\nexport const createTeacher = async teacherData => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/teacher`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(teacherData)\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || \"Failed to create teacher\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error creating teacher:\", error);\n    throw error;\n  }\n};\n\n// Get all teachers\nexport const getAllTeachers = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/teacher`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch teachers\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching teachers:\", error);\n    throw error;\n  }\n};\n\n// Get teacher by ID\nexport const getTeacherById = async teacherId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/teacher/${teacherId}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch teacher\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching teacher:\", error);\n    throw error;\n  }\n};\n\n// Update teacher\nexport const updateTeacher = async (teacherId, teacherData) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/teacher/${teacherId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(teacherData)\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || \"Failed to update teacher\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error updating teacher:\", error);\n    throw error;\n  }\n};\n\n// Delete teacher\nexport const deleteTeacher = async teacherId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/teacher/${teacherId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || \"Failed to delete teacher\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error deleting teacher:\", error);\n    throw error;\n  }\n};\n\n// Helper function to map frontend form data to backend format\nexport const mapFormDataToTeacherDto = (formData, classes = []) => {\n  // Map selectedClasses to class names for sub_01, sub_02, etc.\n  const selectedClassNames = formData.selectedClasses.map(classId => {\n    const classItem = classes.find(c => c.id === classId);\n    return classItem ? classItem.name : null;\n  }).filter(Boolean).slice(0, 4); // Limit to 4 classes\n\n  const teacherDto = {\n    name: formData.name,\n    email: formData.email,\n    registerNumber: formData.registrationNumber,\n    contactNumber: formData.contact,\n    sub_01: selectedClassNames[0] || null,\n    sub_02: selectedClassNames[1] || null,\n    sub_03: selectedClassNames[2] || null,\n    sub_04: selectedClassNames[3] || null\n  };\n  return teacherDto;\n};\n\n// Helper function to map backend teacher data to frontend format\nexport const mapTeacherToFormData = (teacher, classes = []) => {\n  // Map sub_01, sub_02, etc. back to selectedClasses IDs\n  const subjectNames = [teacher.sub_01, teacher.sub_02, teacher.sub_03, teacher.sub_04].filter(Boolean);\n  const selectedClasses = subjectNames.map(subjectName => {\n    const classItem = classes.find(c => c.name === subjectName);\n    return classItem ? classItem.id : null;\n  }).filter(Boolean);\n  return {\n    name: teacher.name || \"\",\n    email: teacher.email || \"\",\n    registrationNumber: teacher.registerNumber || \"\",\n    contact: teacher.contactNumber || \"\",\n    selectedClasses: selectedClasses\n  };\n};","map":{"version":3,"names":["API_BASE_URL","createTeacher","teacherData","response","fetch","method","headers","body","JSON","stringify","ok","error","json","Error","message","console","getAllTeachers","getTeacherById","teacherId","updateTeacher","deleteTeacher","mapFormDataToTeacherDto","formData","classes","selectedClassNames","selectedClasses","map","classId","classItem","find","c","id","name","filter","Boolean","slice","teacherDto","email","registerNumber","registrationNumber","contactNumber","contact","sub_01","sub_02","sub_03","sub_04","mapTeacherToFormData","teacher","subjectNames","subjectName"],"sources":["C:/Final System/online-attendance-system-nenasa/Frontend/frontend-app/src/services/teacherService.js"],"sourcesContent":["// Teacher service for API calls\r\nconst API_BASE_URL = \"http://localhost:8000\";\r\n\r\n// Create a new teacher\r\nexport const createTeacher = async (teacherData) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/teacher`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(teacherData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.json();\r\n      throw new Error(error.message || \"Failed to create teacher\");\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error creating teacher:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get all teachers\r\nexport const getAllTeachers = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/teacher`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to fetch teachers\");\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching teachers:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get teacher by ID\r\nexport const getTeacherById = async (teacherId) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/teacher/${teacherId}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to fetch teacher\");\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching teacher:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update teacher\r\nexport const updateTeacher = async (teacherId, teacherData) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/teacher/${teacherId}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(teacherData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.json();\r\n      throw new Error(error.message || \"Failed to update teacher\");\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error updating teacher:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete teacher\r\nexport const deleteTeacher = async (teacherId) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/teacher/${teacherId}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.json();\r\n      throw new Error(error.message || \"Failed to delete teacher\");\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error deleting teacher:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Helper function to map frontend form data to backend format\r\nexport const mapFormDataToTeacherDto = (formData, classes = []) => {\r\n  // Map selectedClasses to class names for sub_01, sub_02, etc.\r\n  const selectedClassNames = formData.selectedClasses\r\n    .map((classId) => {\r\n      const classItem = classes.find((c) => c.id === classId);\r\n      return classItem ? classItem.name : null;\r\n    })\r\n    .filter(Boolean)\r\n    .slice(0, 4); // Limit to 4 classes\r\n\r\n  const teacherDto = {\r\n    name: formData.name,\r\n    email: formData.email,\r\n    registerNumber: formData.registrationNumber,\r\n    contactNumber: formData.contact,\r\n    sub_01: selectedClassNames[0] || null,\r\n    sub_02: selectedClassNames[1] || null,\r\n    sub_03: selectedClassNames[2] || null,\r\n    sub_04: selectedClassNames[3] || null,\r\n  };\r\n\r\n  return teacherDto;\r\n};\r\n\r\n// Helper function to map backend teacher data to frontend format\r\nexport const mapTeacherToFormData = (teacher, classes = []) => {\r\n  // Map sub_01, sub_02, etc. back to selectedClasses IDs\r\n  const subjectNames = [\r\n    teacher.sub_01,\r\n    teacher.sub_02,\r\n    teacher.sub_03,\r\n    teacher.sub_04,\r\n  ].filter(Boolean);\r\n\r\n  const selectedClasses = subjectNames\r\n    .map((subjectName) => {\r\n      const classItem = classes.find((c) => c.name === subjectName);\r\n      return classItem ? classItem.id : null;\r\n    })\r\n    .filter(Boolean);\r\n\r\n  return {\r\n    name: teacher.name || \"\",\r\n    email: teacher.email || \"\",\r\n    registrationNumber: teacher.registerNumber || \"\",\r\n    contact: teacher.contactNumber || \"\",\r\n    selectedClasses: selectedClasses,\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}