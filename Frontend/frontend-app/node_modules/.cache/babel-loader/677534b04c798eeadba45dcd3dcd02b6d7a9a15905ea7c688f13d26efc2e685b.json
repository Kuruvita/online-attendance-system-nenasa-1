{"ast":null,"code":"// User service for API calls\nconst API_BASE_URL = \"http://localhost:8000\";\n\n// Get user by register number\nexport const getUserByRegisterNumber = async registerNumber => {\n  try {\n    if (!registerNumber || registerNumber.trim() === \"\") {\n      return null;\n    }\n    const response = await fetch(`${API_BASE_URL}/users/by-register/${encodeURIComponent(registerNumber)}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (!response.ok) {\n      if (response.status === 404) {\n        // User not found - this is expected, return null\n        return null;\n      }\n      throw new Error(\"Failed to fetch user by register number\");\n    }\n    const result = await response.json();\n    return result.success ? result.user : null;\n  } catch (error) {\n    console.error(\"Error fetching user by register number:\", error);\n    // Don't throw error for user not found cases\n    if (error.message.includes(\"404\") || error.message.includes(\"not found\")) {\n      return null;\n    }\n    throw error;\n  }\n};\n\n// Get all users\nexport const getAllUsers = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch users\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching users:\", error);\n    throw error;\n  }\n};\n\n// Get user by ID\nexport const getUserById = async userId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/${userId}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch user\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching user:\", error);\n    throw error;\n  }\n};\n\n// Get user profile by email\nexport const getUserProfileByEmail = async email => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/profile/${encodeURIComponent(email)}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch user profile\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching user profile:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","getUserByRegisterNumber","registerNumber","trim","response","fetch","encodeURIComponent","method","headers","ok","status","Error","result","json","success","user","error","console","message","includes","getAllUsers","getUserById","userId","getUserProfileByEmail","email"],"sources":["C:/Final System/online-attendance-system-nenasa/Frontend/frontend-app/src/services/userService.js"],"sourcesContent":["// User service for API calls\r\nconst API_BASE_URL = \"http://localhost:8000\";\r\n\r\n// Get user by register number\r\nexport const getUserByRegisterNumber = async (registerNumber) => {\r\n  try {\r\n    if (!registerNumber || registerNumber.trim() === \"\") {\r\n      return null;\r\n    }\r\n\r\n    const response = await fetch(\r\n      `${API_BASE_URL}/users/by-register/${encodeURIComponent(registerNumber)}`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    );\r\n\r\n    if (!response.ok) {\r\n      if (response.status === 404) {\r\n        // User not found - this is expected, return null\r\n        return null;\r\n      }\r\n      throw new Error(\"Failed to fetch user by register number\");\r\n    }\r\n\r\n    const result = await response.json();\r\n    return result.success ? result.user : null;\r\n  } catch (error) {\r\n    console.error(\"Error fetching user by register number:\", error);\r\n    // Don't throw error for user not found cases\r\n    if (error.message.includes(\"404\") || error.message.includes(\"not found\")) {\r\n      return null;\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get all users\r\nexport const getAllUsers = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/users`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to fetch users\");\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching users:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get user by ID\r\nexport const getUserById = async (userId) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/users/${userId}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to fetch user\");\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching user:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get user profile by email\r\nexport const getUserProfileByEmail = async (email) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${API_BASE_URL}/users/profile/${encodeURIComponent(email)}`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    );\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to fetch user profile\");\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching user profile:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}