{"ast":null,"code":"var _jsxFileName = \"C:\\\\Final System\\\\online-attendance-system-nenasa\\\\Frontend\\\\frontend-app\\\\src\\\\components\\\\Dashboard\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useMsal } from '@azure/msal-react';\nimport AdminDashboard from './AdminDashboard';\nimport TeacherDashboard from './TeacherDashboard';\nimport StudentDashboard from './StudentDashboard';\nimport './Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const {\n    accounts\n  } = useMsal();\n  const [userRole, setUserRole] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const syncAzureUser = async () => {\n      if (accounts.length > 0) {\n        const user = accounts[0];\n        console.log('Azure AD User Data:', user); // Debug log\n\n        try {\n          // POST user info to backend for auto-create/update\n          const response = await fetch('http://localhost:8000/users/azure-login', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              email: user.username,\n              displayName: user.name || user.displayName,\n              azureId: user.localAccountId || user.homeAccountId || user.accountIdentifier\n            })\n          });\n          if (response.ok) {\n            console.log('User synced successfully');\n          } else {\n            console.error('Failed to sync user:', response.status);\n          }\n        } catch (error) {\n          console.error('Error syncing Azure user:', error);\n        }\n      }\n    };\n    syncAzureUser();\n  }, [accounts]);\n  useEffect(() => {\n    const fetchUserRole = async () => {\n      try {\n        if (accounts.length > 0) {\n          const user = accounts[0];\n          // Call backend API to get user role based on email\n          const response = await fetch(`http://localhost:8000/users/profile/${user.username}`, {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          if (response.ok) {\n            const userData = await response.json();\n            setUserRole(userData.role);\n          } else {\n            // If user doesn't exist in backend, default to student role\n            setUserRole('student');\n          }\n        }\n      } catch (err) {\n        console.error('Error fetching user role:', err);\n        setError('Failed to load user information');\n        // Default to student role if error occurs\n        setUserRole('student');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchUserRole();\n  }, [accounts]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading dashboard...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-error\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this);\n  }\n  const renderDashboard = () => {\n    switch (userRole) {\n      case 'admin':\n        return /*#__PURE__*/_jsxDEV(AdminDashboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 16\n        }, this);\n      case 'teacher':\n        return /*#__PURE__*/_jsxDEV(TeacherDashboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 16\n        }, this);\n      case 'student':\n        return /*#__PURE__*/_jsxDEV(StudentDashboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 16\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(StudentDashboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 16\n        }, this);\n      // Default to student dashboard\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [userRole === 'admin' && 'Admin Dashboard', userRole === 'teacher' && 'Teacher Dashboard', userRole === 'student' && 'Student Dashboard']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), accounts.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Welcome, \", accounts[0].name, \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"user-role\",\n          children: userRole === null || userRole === void 0 ? void 0 : userRole.toUpperCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), renderDashboard()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"b93tzYGySfExcMERs1V5WW0aiHM=\", false, function () {\n  return [useMsal];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","useMsal","AdminDashboard","TeacherDashboard","StudentDashboard","jsxDEV","_jsxDEV","Dashboard","_s","accounts","userRole","setUserRole","loading","setLoading","error","setError","syncAzureUser","length","user","console","log","response","fetch","method","headers","body","JSON","stringify","email","username","displayName","name","azureId","localAccountId","homeAccountId","accountIdentifier","ok","status","fetchUserRole","userData","json","role","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","window","location","reload","renderDashboard","toUpperCase","_c","$RefreshReg$"],"sources":["C:/Final System/online-attendance-system-nenasa/Frontend/frontend-app/src/components/Dashboard/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useMsal } from '@azure/msal-react';\r\nimport AdminDashboard from './AdminDashboard';\r\nimport TeacherDashboard from './TeacherDashboard';\r\nimport StudentDashboard from './StudentDashboard';\r\nimport './Dashboard.css';\r\n\r\nconst Dashboard = () => {\r\n  const { accounts } = useMsal();\r\n  const [userRole, setUserRole] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const syncAzureUser = async () => {\r\n      if (accounts.length > 0) {\r\n        const user = accounts[0];\r\n        console.log('Azure AD User Data:', user); // Debug log\r\n        \r\n        try {\r\n          // POST user info to backend for auto-create/update\r\n          const response = await fetch('http://localhost:8000/users/azure-login', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n              email: user.username,\r\n              displayName: user.name || user.displayName,\r\n              azureId: user.localAccountId || user.homeAccountId || user.accountIdentifier\r\n            })\r\n          });\r\n          \r\n          if (response.ok) {\r\n            console.log('User synced successfully');\r\n          } else {\r\n            console.error('Failed to sync user:', response.status);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error syncing Azure user:', error);\r\n        }\r\n      }\r\n    };\r\n    syncAzureUser();\r\n  }, [accounts]);\r\n\r\n  useEffect(() => {\r\n    const fetchUserRole = async () => {\r\n      try {\r\n        if (accounts.length > 0) {\r\n          const user = accounts[0];\r\n          // Call backend API to get user role based on email\r\n          const response = await fetch(`http://localhost:8000/users/profile/${user.username}`, {\r\n            method: 'GET',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          });\r\n\r\n          if (response.ok) {\r\n            const userData = await response.json();\r\n            setUserRole(userData.role);\r\n          } else {\r\n            // If user doesn't exist in backend, default to student role\r\n            setUserRole('student');\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.error('Error fetching user role:', err);\r\n        setError('Failed to load user information');\r\n        // Default to student role if error occurs\r\n        setUserRole('student');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchUserRole();\r\n  }, [accounts]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"dashboard-loading\">\r\n        <div className=\"loading-spinner\"></div>\r\n        <p>Loading dashboard...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"dashboard-error\">\r\n        <p>{error}</p>\r\n        <button onClick={() => window.location.reload()}>Retry</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const renderDashboard = () => {\r\n    switch (userRole) {\r\n      case 'admin':\r\n        return <AdminDashboard />;\r\n      case 'teacher':\r\n        return <TeacherDashboard />;\r\n      case 'student':\r\n        return <StudentDashboard />;\r\n      default:\r\n        return <StudentDashboard />; // Default to student dashboard\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <div className=\"dashboard-header\">\r\n        <h1>\r\n          {userRole === 'admin' && 'Admin Dashboard'}\r\n          {userRole === 'teacher' && 'Teacher Dashboard'}\r\n          {userRole === 'student' && 'Student Dashboard'}\r\n        </h1>\r\n        {accounts.length > 0 && (\r\n          <div className=\"user-info\">\r\n            <span>Welcome, {accounts[0].name}!</span>\r\n            <span className=\"user-role\">{userRole?.toUpperCase()}</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n      {renderDashboard()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}