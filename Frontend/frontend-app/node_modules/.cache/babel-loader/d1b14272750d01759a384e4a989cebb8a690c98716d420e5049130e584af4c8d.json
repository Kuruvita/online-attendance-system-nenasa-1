{"ast":null,"code":"// Student service for API calls\nconst API_BASE_URL = \"http://localhost:8000\";\n\n// Create a new student\nexport const createStudent = async studentData => {\n  try {\n    // Create FormData for file upload\n    const formData = new FormData();\n\n    // Append all student fields to FormData\n    Object.keys(studentData).forEach(key => {\n      if (key === \"profileImage\" && studentData[key]) {\n        // Append the file\n        formData.append(\"profileImage\", studentData[key]);\n      } else if (studentData[key] !== null && studentData[key] !== \"\") {\n        // Append other fields\n        formData.append(key, studentData[key]);\n      }\n    });\n    const response = await fetch(`${API_BASE_URL}/student`, {\n      method: \"POST\",\n      body: formData // Use FormData instead of JSON\n      // Don't set Content-Type header - let browser set it with boundary\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || \"Failed to create student\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error creating student:\", error);\n    throw error;\n  }\n};\n\n// Get all students\nexport const getAllStudents = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/student`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch students\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching students:\", error);\n    throw error;\n  }\n};\n\n// Get student by ID\nexport const getStudentById = async studentId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/student/${studentId}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch student\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching student:\", error);\n    throw error;\n  }\n};\n\n// Update student\nexport const updateStudent = async (studentId, studentData) => {\n  try {\n    // Create FormData for file upload (if image is being updated)\n    const isFormData = studentData.profileImage instanceof File;\n    let requestBody;\n    let headers = {};\n    if (isFormData) {\n      // Use FormData for image updates\n      const formData = new FormData();\n      Object.keys(studentData).forEach(key => {\n        if (key === \"profileImage\" && studentData[key]) {\n          formData.append(\"profileImage\", studentData[key]);\n        } else if (studentData[key] !== null && studentData[key] !== \"\") {\n          formData.append(key, studentData[key]);\n        }\n      });\n      requestBody = formData;\n      // Don't set Content-Type header for FormData\n    } else {\n      // Use JSON for regular updates\n      requestBody = JSON.stringify(studentData);\n      headers[\"Content-Type\"] = \"application/json\";\n    }\n    const response = await fetch(`${API_BASE_URL}/student/${studentId}`, {\n      method: \"PUT\",\n      headers: headers,\n      body: requestBody\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || \"Failed to update student\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error updating student:\", error);\n    throw error;\n  }\n};\n\n// Delete student\nexport const deleteStudent = async studentId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/student/${studentId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to delete student\");\n    }\n    return true;\n  } catch (error) {\n    console.error(\"Error deleting student:\", error);\n    throw error;\n  }\n};\n\n// Lookup student by registration number\n// Note: This uses the user service endpoint since there's no dedicated endpoint in student controller\nexport const lookupStudentByRegisterNumber = async registerNumber => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/by-register/${registerNumber}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (!response.ok) {\n      if (response.status === 404) {\n        return null; // Student not found\n      }\n      throw new Error(\"Failed to lookup student\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error looking up student:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","createStudent","studentData","formData","FormData","Object","keys","forEach","key","append","response","fetch","method","body","ok","error","json","Error","message","console","getAllStudents","headers","getStudentById","studentId","updateStudent","isFormData","profileImage","File","requestBody","JSON","stringify","deleteStudent","lookupStudentByRegisterNumber","registerNumber","status"],"sources":["C:/Final System/online-attendance-system-nenasa/Frontend/frontend-app/src/services/studentService.js"],"sourcesContent":["// Student service for API calls\r\nconst API_BASE_URL = \"http://localhost:8000\";\r\n\r\n// Create a new student\r\nexport const createStudent = async (studentData) => {\r\n  try {\r\n    // Create FormData for file upload\r\n    const formData = new FormData();\r\n\r\n    // Append all student fields to FormData\r\n    Object.keys(studentData).forEach((key) => {\r\n      if (key === \"profileImage\" && studentData[key]) {\r\n        // Append the file\r\n        formData.append(\"profileImage\", studentData[key]);\r\n      } else if (studentData[key] !== null && studentData[key] !== \"\") {\r\n        // Append other fields\r\n        formData.append(key, studentData[key]);\r\n      }\r\n    });\r\n\r\n    const response = await fetch(`${API_BASE_URL}/student`, {\r\n      method: \"POST\",\r\n      body: formData, // Use FormData instead of JSON\r\n      // Don't set Content-Type header - let browser set it with boundary\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.json();\r\n      throw new Error(error.message || \"Failed to create student\");\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error creating student:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get all students\r\nexport const getAllStudents = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/student`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to fetch students\");\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching students:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get student by ID\r\nexport const getStudentById = async (studentId) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/student/${studentId}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to fetch student\");\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching student:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update student\r\nexport const updateStudent = async (studentId, studentData) => {\r\n  try {\r\n    // Create FormData for file upload (if image is being updated)\r\n    const isFormData = studentData.profileImage instanceof File;\r\n\r\n    let requestBody;\r\n    let headers = {};\r\n\r\n    if (isFormData) {\r\n      // Use FormData for image updates\r\n      const formData = new FormData();\r\n      Object.keys(studentData).forEach((key) => {\r\n        if (key === \"profileImage\" && studentData[key]) {\r\n          formData.append(\"profileImage\", studentData[key]);\r\n        } else if (studentData[key] !== null && studentData[key] !== \"\") {\r\n          formData.append(key, studentData[key]);\r\n        }\r\n      });\r\n      requestBody = formData;\r\n      // Don't set Content-Type header for FormData\r\n    } else {\r\n      // Use JSON for regular updates\r\n      requestBody = JSON.stringify(studentData);\r\n      headers[\"Content-Type\"] = \"application/json\";\r\n    }\r\n\r\n    const response = await fetch(`${API_BASE_URL}/student/${studentId}`, {\r\n      method: \"PUT\",\r\n      headers: headers,\r\n      body: requestBody,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.json();\r\n      throw new Error(error.message || \"Failed to update student\");\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error updating student:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete student\r\nexport const deleteStudent = async (studentId) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/student/${studentId}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to delete student\");\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error deleting student:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Lookup student by registration number\r\n// Note: This uses the user service endpoint since there's no dedicated endpoint in student controller\r\nexport const lookupStudentByRegisterNumber = async (registerNumber) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${API_BASE_URL}/users/by-register/${registerNumber}`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    );\r\n\r\n    if (!response.ok) {\r\n      if (response.status === 404) {\r\n        return null; // Student not found\r\n      }\r\n      throw new Error(\"Failed to lookup student\");\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error looking up student:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}