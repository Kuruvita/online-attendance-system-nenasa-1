{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { useMsal } from '@azure/msal-react';\nconst useAutoUserProvision = () => {\n  _s();\n  const {\n    accounts\n  } = useMsal();\n  useEffect(() => {\n    const provisionUser = async () => {\n      if (accounts.length > 0) {\n        const account = accounts[0];\n        try {\n          // Extract user information from Azure AD account\n          const userPrincipalName = account.username; // This is the UPN\n          const displayName = account.name;\n          const email = account.username; // In Azure AD, username is typically the email/UPN\n\n          console.log('Auto-provisioning user:', {\n            userPrincipalName,\n            displayName,\n            email\n          });\n\n          // Call backend to auto-provision user\n          const response = await fetch('http://localhost:8000/auth/azure/auto-provision', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              userPrincipalName,\n              displayName,\n              email\n            })\n          });\n          if (response.ok) {\n            const result = await response.json();\n            console.log('User auto-provisioned successfully:', result);\n\n            // Store user info in session storage for later use\n            sessionStorage.setItem('currentUser', JSON.stringify(result.user));\n          } else {\n            const error = await response.text();\n            console.error('Failed to auto-provision user:', error);\n          }\n        } catch (error) {\n          console.error('Error during auto-provision:', error);\n        }\n      }\n    };\n\n    // Only provision if user is logged in but not yet provisioned\n    if (accounts.length > 0 && !sessionStorage.getItem('currentUser')) {\n      provisionUser();\n    }\n  }, [accounts]);\n  return null;\n};\n_s(useAutoUserProvision, \"lzlFmot3rC/yZvP0tSCqyOzrKcM=\", false, function () {\n  return [useMsal];\n});\nexport default useAutoUserProvision;","map":{"version":3,"names":["useEffect","useMsal","useAutoUserProvision","_s","accounts","provisionUser","length","account","userPrincipalName","username","displayName","name","email","console","log","response","fetch","method","headers","body","JSON","stringify","ok","result","json","sessionStorage","setItem","user","error","text","getItem"],"sources":["C:/Final System/online-attendance-system-nenasa/Frontend/frontend-app/src/hooks/useAutoUserProvision.js"],"sourcesContent":["import { useEffect } from 'react';\r\nimport { useMsal } from '@azure/msal-react';\r\n\r\nconst useAutoUserProvision = () => {\r\n  const { accounts } = useMsal();\r\n\r\n  useEffect(() => {\r\n    const provisionUser = async () => {\r\n      if (accounts.length > 0) {\r\n        const account = accounts[0];\r\n        \r\n        try {\r\n          // Extract user information from Azure AD account\r\n          const userPrincipalName = account.username; // This is the UPN\r\n          const displayName = account.name;\r\n          const email = account.username; // In Azure AD, username is typically the email/UPN\r\n\r\n          console.log('Auto-provisioning user:', {\r\n            userPrincipalName,\r\n            displayName,\r\n            email\r\n          });\r\n\r\n          // Call backend to auto-provision user\r\n          const response = await fetch('http://localhost:8000/auth/azure/auto-provision', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n              userPrincipalName,\r\n              displayName,\r\n              email,\r\n            }),\r\n          });\r\n\r\n          if (response.ok) {\r\n            const result = await response.json();\r\n            console.log('User auto-provisioned successfully:', result);\r\n            \r\n            // Store user info in session storage for later use\r\n            sessionStorage.setItem('currentUser', JSON.stringify(result.user));\r\n          } else {\r\n            const error = await response.text();\r\n            console.error('Failed to auto-provision user:', error);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error during auto-provision:', error);\r\n        }\r\n      }\r\n    };\r\n\r\n    // Only provision if user is logged in but not yet provisioned\r\n    if (accounts.length > 0 && !sessionStorage.getItem('currentUser')) {\r\n      provisionUser();\r\n    }\r\n  }, [accounts]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default useAutoUserProvision;\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,OAAO,QAAQ,mBAAmB;AAE3C,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAM;IAAEC;EAAS,CAAC,GAAGH,OAAO,CAAC,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd,MAAMK,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAID,QAAQ,CAACE,MAAM,GAAG,CAAC,EAAE;QACvB,MAAMC,OAAO,GAAGH,QAAQ,CAAC,CAAC,CAAC;QAE3B,IAAI;UACF;UACA,MAAMI,iBAAiB,GAAGD,OAAO,CAACE,QAAQ,CAAC,CAAC;UAC5C,MAAMC,WAAW,GAAGH,OAAO,CAACI,IAAI;UAChC,MAAMC,KAAK,GAAGL,OAAO,CAACE,QAAQ,CAAC,CAAC;;UAEhCI,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAE;YACrCN,iBAAiB;YACjBE,WAAW;YACXE;UACF,CAAC,CAAC;;UAEF;UACA,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,iDAAiD,EAAE;YAC9EC,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACP,cAAc,EAAE;YAClB,CAAC;YACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;cACnBb,iBAAiB;cACjBE,WAAW;cACXE;YACF,CAAC;UACH,CAAC,CAAC;UAEF,IAAIG,QAAQ,CAACO,EAAE,EAAE;YACf,MAAMC,MAAM,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;YACpCX,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAES,MAAM,CAAC;;YAE1D;YACAE,cAAc,CAACC,OAAO,CAAC,aAAa,EAAEN,IAAI,CAACC,SAAS,CAACE,MAAM,CAACI,IAAI,CAAC,CAAC;UACpE,CAAC,MAAM;YACL,MAAMC,KAAK,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;YACnChB,OAAO,CAACe,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;UACxD;QACF,CAAC,CAAC,OAAOA,KAAK,EAAE;UACdf,OAAO,CAACe,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACtD;MACF;IACF,CAAC;;IAED;IACA,IAAIxB,QAAQ,CAACE,MAAM,GAAG,CAAC,IAAI,CAACmB,cAAc,CAACK,OAAO,CAAC,aAAa,CAAC,EAAE;MACjEzB,aAAa,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,CAACD,QAAQ,CAAC,CAAC;EAEd,OAAO,IAAI;AACb,CAAC;AAACD,EAAA,CAxDID,oBAAoB;EAAA,QACHD,OAAO;AAAA;AAyD9B,eAAeC,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}